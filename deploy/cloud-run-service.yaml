# Cloud Run 서비스 설정 (프로덕션)
# gcloud run services replace cloud-run-service.yaml 로 배포

apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: writerly-slack-ai
  namespace: "writerly-01"
  labels:
    app: writerly-slack-ai
    version: "1.0.0"
    environment: production
    team: writerly
  annotations:
    run.googleapis.com/cpu-throttling: "false"
    run.googleapis.com/execution-environment: gen2
    run.googleapis.com/ingress: all
    run.googleapis.com/ingress-status: all
spec:
  template:
    metadata:
      labels:
        app: writerly-slack-ai
        version: "1.0.0"
        environment: production
      annotations:
        # 자동 스케일링 설정
        autoscaling.knative.dev/minScale: "0"
        autoscaling.knative.dev/maxScale: "10"
        autoscaling.knative.dev/target: "70"
        
        # 리소스 할당
        run.googleapis.com/memory: "512Mi"
        run.googleapis.com/cpu: "1000m"
        
        # 네트워킹 및 보안
        run.googleapis.com/vpc-access-connector: "projects/writerly-01/locations/us-central1/connectors/writerly-vpc-connector"
        run.googleapis.com/vpc-access-egress: "private-ranges-only"
        
        # 실행 환경
        run.googleapis.com/execution-environment: gen2
        run.googleapis.com/sandbox: gvisor
        
        # 헬스체크 설정
        run.googleapis.com/startup-cpu-boost: "true"
    spec:
      # 컨테이너 타임아웃 (최대 60초)
      timeoutSeconds: 60
      
      # 동시 요청 처리 수
      containerConcurrency: 100
      
      # 서비스 계정 (최소 권한 원칙)
      serviceAccountName: "writerly-service-account@writerly-01.iam.gserviceaccount.com"
      
      containers:
      - name: writerly-ai-container
        # 이미지는 Cloud Build에서 자동 설정
        image: gcr.io/writerly-01/writerly-slack-ai:latest
        
        ports:
        - name: http1
          containerPort: 8080
          protocol: TCP
        
        # 환경 변수
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8080"
        - name: VERTEX_AI_PROJECT_ID
          value: "writerly-01"
        - name: VERTEX_AI_LOCATION
          value: "us-central1"
        - name: CLOUD_TASKS_PROJECT_ID
          value: "writerly-01"
        - name: CLOUD_TASKS_LOCATION
          value: "us-central1"
        - name: CLOUD_TASKS_QUEUE
          value: "ai-processing-queue"
        
        # 시크릿 환경 변수
        - name: SLACK_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: "slack-client-id"
              key: "latest"
        - name: SLACK_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: "slack-client-secret"
              key: "latest"
        - name: SLACK_SIGNING_SECRET
          valueFrom:
            secretKeyRef:
              name: "slack-signing-secret"
              key: "latest"
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: "redis-host"
              key: "latest"
        - name: REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: "redis-port"
              key: "latest"
        - name: REDIS_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: "redis-auth-token"
              key: "latest"
        - name: SESSION_SECRET
          valueFrom:
            secretKeyRef:
              name: "session-secret"
              key: "latest"
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: "encryption-key"
              key: "latest"
        
        # 리소스 제한
        resources:
          limits:
            memory: "512Mi"
            cpu: "1000m"
          requests:
            memory: "256Mi"
            cpu: "500m"
        
        # 헬스체크 설정
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 10
          successThreshold: 1
        
        # 보안 컨텍스트
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
  
  traffic:
  # 프로덕션 트래픽을 모든 요청에 할당
  - percent: 100
    latestRevision: true